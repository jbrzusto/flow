#!/usr/bin/Rscript
# -*- mode: r; -*-

usage = function() {
    cat('
makepol - export a sequence of digdar radar sweeps as a bzip2-compressed WAMOS .pol file

Usage: makepol [-h] [-d] [-s SITE] [-n N] [-i INDIR] [-o OUTDIR] [-u] [TS]

with:

       -h: show help

       -d: dry run: list the input files that would be used, but do not generate the .pol file

  -s SITE: JSON-formatted file describing the radar installation
           default: if first three letters of first data filename are `xyz`
           then the default is:  `/usr/lib/R/site-library/flow/xyz_radar_site.json`

     -n N: number of consecutive sweeps to export; typically of the form 1 + 2^m;
           default: 129

 -i INDIR: folder containing the .dat or .dat.gz sweep files;
           default: . (current directory)

-o OUTDIR: folder in which to write the .pol.bz2 file;
           default: . (current directory)

       -u: leave .pol file uncompressed, instead of using `bzip2 -9` to compress it

       TS: timestamp selector; this is a string matching any identifiable portion of a timestamp of
           the form YYYY-MM-DDTHH-MM-SS, e.g. "T03-45" or "02-01T";

The sweeps exported are the first N in DIR which match TS.  If TS is not
specified, the first N sweeps in DIR are used.  "first" means by timestamp
embedded in the filename.
')
}

ARGV = commandArgs(TRUE)
ARGC = length(ARGV)
N = 129
OUTDIR = INDIR = "."
TS = "" ## default to using any date/time
SITE = NULL
COMPRESS = TRUE
DRYRUN = FALSE
doUsage = FALSE
VELOCITY_OF_LIGHT = 2.99792458E8
i = 1
while( i <= length(ARGV) && ! doUsage) {
    switch(ARGV[i],
           "-h" = {
               doUsage = TRUE
               i = length(ARGV)
           },
           "-d" = {
               DRYRUN = TRUE
           },
           "-u" = {
               COMPRESS = FALSE
           },
           "-n" = {
               if (i < ARGC) {
                   N = as.integer(ARGV[i + 1])
                   i = i + 1
               } else {
                   doUsage = TRUE
               }
           },
           "-s" = {
               if (i < ARGC) {
                   SITE = ARGV[i + 1]
                   i = i + 1
                   if (! file.exists(SITE))
                       stop("Site file not found: ", SITE)
               } else {
                   doUsage = TRUE
               }
           },
           "-i" = {
               if (i < ARGC) {
                   INDIR = ARGV[i + 1]
                   i = i + 1
               } else {
                   doUsage = TRUE
               }
           },
           "-o" = {
               if (i < ARGC) {
                   OUTDIR = ARGV[i + 1]
                   i = i + 1
               } else {
                   doUsage = TRUE
               }
           },
           {
               if (grepl("[-0-9T]+", ARGV[i])) {
                   TS = paste0(".*", ARGV[i], ".*")
               } else {
                   doUsage = TRUE
               }
           })
    i = i + 1
}

if (doUsage) {
    usage()
    q("no")
}

suppressWarnings(suppressMessages(library(flow)))

allFiles = dir(INDIR, full.names=TRUE, pattern=".*\\.dat(\\.gz)?$")
first = grep(pattern=TS, allFiles, perl=TRUE)
if (length(first) >= 1) {
    files = head(allFiles[first[1]:length(allFiles)], N)
    if (length(files) < N) {
        stop("Not enough files in ", INDIR, ":", "Only found ", length(files), " starting at match ", files[1])
    }
} else if (length(first) == 0){
    stop("No files matching ", TS, " in ", INDIR)
}

## if not specified, load radar site file from package, based on "short code" from filenames

if (is.null(SITE)) {
    SITE = strsplit(basename(files[1]), "-")[[1]][1] %>% paste0("_radar_site.json")
    siteFile = SITE %>% system.file(package="flow")
} else {
    siteFile = SITE
}

if (! file.exists(siteFile))
    stop("Unable to find radar description file '", SITE,
         "'.\n  You need to create that file and specify it using the `-s` parameter")

tryCatch({
    META = jsonlite::fromJSON(gsub("//.*$", "", readLines(siteFile)))
}, error = function(e) {
    stop("error parsing the radar site file: ", SITE, ":\n", as.character(e))
})

if (DRYRUN) {
    cat(paste(files, collapse="\n"), "\n")
    q("no")
}

## read sweeps
sweeps = lapply(files, getSweepDigdar)

## get depths at each frame

depth = getDepth(sapply(sweeps, function(n) attr(n, "radar.meta")$ts0))

## get closest decimation rate to desired sample spacing
cellSize = VELOCITY_OF_LIGHT / attr(sweeps[[1]], "radar.meta")$rate / 2
decim = round(META$polMPS / cellSize)
if (abs((cellSize * decim - META$polMPS) / META$polMPS) > 0.05) {
    warning("desired polMPS of ", META$polMPS, " cannot be achieved to within 5% by decimation; proceeding with best possible")
}

## export as Wamos file
outname = exportWamos(sweeps, path=OUTDIR, depths=depth, nACP=450, decim=decim, aziLim = META$polAziLim, rangeLim = META$polRangeLim, meta=META)

## compress file; copy to FORCE workstation; delete
if (COMPRESS) {
    system(paste("bzip2 -9", outname))
} else {
    outname = sub(".bz2$", "", outname, perl=TRUE)
}
cat(outname, "\n")

#!/usr/bin/Rscript
# -*- mode: r; -*-

usage = function() {
    cat('
Generate .jpg scan-converted (cartesian) images from digdar radar sweeps

Usage: digdar2jpg [-h] [-q QUALITY] [-s SITE] [-n N] [-i INDIR] [-o OUTDIR] [-f FILE] [TS]

with:

        -h: show help

-q QUALITY: quality of output jpeg (0..100); file size increases with quality
            default: 75

   -s SITE: JSON-formatted file describing the radar installation;
            default: if first three letters of first data filename are `xyz`
            then the default is:  `/usr/lib/R/site-library/flow/xyz_radar_site.json`

      -n N: number of consecutive sweeps to generate images for;
            default: 1.  Specify `-n -1` to export images for all matching files.

  -i INDIR: folder containing the .dat or .dat.gz sweep files;
            default: . (current directory)

 -o OUTDIR: folder in which to write the .jpg file(s); Output
            filenames are the same as input filenames, except that the
            suffix ".dat(.gz)?" is replaced by ".jpg";
            default: . (current directory).

   -f FILE: if specified, use this digdar .dat file.  Supersedes INDIR and TS.

        TS: timestamp selector; this is a string matching any
            identifiable portion of a timestamp of the form
            YYYY-MM-DDTHH-MM-SS, e.g. "T03-45" or "02-01T".

The sweeps used are the first N in DIR which match TS.  If TS is
not specified, the first N sweeps in DIR are used.  "first" means by timestamp
embedded in the filename.
')
}

ARGV = commandArgs(TRUE)
ARGC = length(ARGV)
QUALITY = 75
N = 1
OUTDIR = INDIR = "."
TS = "" ## default to using any date/time
SITE = NULL
FILE = NULL
doUsage = FALSE

i = 1
while( i <= length(ARGV)) {
    if (ARGV[i] == "-h") {
        doUsage = TRUE
        i = length(ARGV)
    } else if (ARGV[i] == "-q") {
        if (i < ARGC) {
            QUALITY = as.double(ARGV[i + 1])
            i = i + 1
        } else {
            doUsage = TRUE
        }
    } else if (ARGV[i] == "-n") {
        if (i < ARGC) {
            N = as.integer(ARGV[i + 1])
            i = i + 1
        } else {
            doUsage = TRUE
        }
    } else if (ARGV[i] == "-s") {
        if (i < ARGC) {
            SITE = ARGV[i + 1]
            i = i + 1
            if (! file.exists(SITE))
                stop("Site file not found: ", SITE)
        } else {
            doUsage = TRUE
        }
    } else if (ARGV[i] == "-i") {
        if (i < ARGC) {
            INDIR = ARGV[i + 1]
            i = i + 1
        } else {
            doUsage = TRUE
        }
    } else if (ARGV[i] == "-f") {
        if (i < ARGC) {
            FILE = ARGV[i + 1]
            i = i + 1
        } else {
            doUsage = TRUE
        }
    } else if (ARGV[i] == "-o") {
        if (i < ARGC) {
            OUTDIR = ARGV[i + 1]
            i = i + 1
        } else {
            doUsage = TRUE
        }
    } else if (grepl("[-0-9T]+", ARGV[i])) {
        TS = paste0(".*", ARGV[i], ".*")
    } else {
        doUsage = TRUE
    }
    i = i + 1
}

if (doUsage) {
    usage()
    q("no")
}

suppressWarnings(suppressMessages(library(flow)))
suppressWarnings(suppressMessages(library(jpeg)))

if (N == 0)
    stop("No files requested.")

if (is.null(FILE)) {
    allFiles = dir(INDIR, full.names=TRUE, pattern=".*\\.dat(\\.gz)?$")
    first = grep(pattern=TS, allFiles, perl=TRUE)
    if (length(first) >= 1) {
        files = allFiles[first[1]:length(allFiles)]
        if (N > 0) {
            files = head(files, N)
            if (length(files) < N)
                warning("Not enough files in ", INDIR, ":", "Only found ", length(files), " starting at match ", files[1], "\nProceeding with what was found!")
        }
    } else if (length(first) == 0){
        stop("No files matching ", TS, " in ", INDIR)
    }
} else {
    files = FILE
}


## if not specified, load radar site file from package, based on "short code" from filenames

if (is.null(SITE))
    SITE = strsplit(files[1], "-")[[1]][1] %>% paste0("_radar_site.json") %>% system.file(package="flow")

if (! file.exists(SITE))
    stop("Unable to find radar description file '", SITE,
         "'.\n  You need to create that file and specify it using this scripts `-s` parameter")

tryCatch({
    siteMeta = jsonlite::fromJSON(gsub("//.*$", "", readLines(SITE)))
}, error = function(e) {
    stop("error parsing the radar site file: ", SITE, ":\n", as.character(e))
})

VELOCITY_OF_LIGHT = 2.99792458E8

## read sweeps one at a time and scan convert them.
for (i in seq(along=files)) {
    x = getSweepDigdar(files[i])
    ## combine site and sweep metadata, allowing site to override some sweep metadata
    meta = c(siteMeta, attr(x, "radar.meta"))
    meta[names(siteMeta$overrides)] = siteMeta$overrides

    dim(x$samples) = c(meta$ns * 2, meta$np)

    samplingRate = meta$clock * 1e6
    decimation = meta$decim

    ## metres per sample
    mps = VELOCITY_OF_LIGHT / (samplingRate / decimation) / 2.0

    ## azimuth range of valid pulses at 0.1 deg spacing
    sampCount = if (meta$mode == "sum") meta$decim else 1

    ## Pulses per sweep: a kludgy way to achieve a fixed number of pulses
    ##   per sweep, currently needed by the scan converter.  The
    ##   Bridgemaster E operating in short pulse mode generates pulses @
    ##   1800 Hz and rotates at 28 RPM for a total of ~ 3857 pulses per
    ##   sweep. We select down to 3600 pulses, which gives 0.1 degree
    ##   azimuth resolution.

    azis = meta$jpgAziLim / 360
    dazi = 1.0 / 3600
    if (diff(azis) > 0) {
        desiredAzi = seq(from = azis[1], to = azis[2], by = dazi)
    } else {
        desiredAzi = c(seq(from = azis[1], to = 1.0 - dazi, by = dazi), seq(from = 0, to = azis[2], by = dazi))
    }
    pulsesPerSweep = length(desiredAzi)

    ## convert hdg-relative azi to azi
    x$azi = (x$azi + meta$heading / 360) %% 1

    ## get pulses uniformly spread along desired arc

    keep = approx(x$azi, seq(along=x$azi), desiredAzi, method="constant", rule=2)$y

    x$samples = x$samples[,keep]

    ## desired pixels per metre
    ppm = 1.0 / meta$jpgMPP

    iwidth = diff(meta$jpgXLim) / meta$jpgMPP
    iheight = diff(meta$jpgYLim) / meta$jpgMPP
    scanConv = .Call("make_scan_converter", as.integer(c(pulsesPerSweep, meta$ns, iwidth, iheight, 0, 0, -meta$jpgXLim[1] / meta$jpgMPP, meta$jpgYLim[2] / meta$jpgMPP, TRUE)), c(ppm * mps, 0 , azis))

    pix = matrix(0L, iheight, iwidth)
    class(pix)="nativeRaster"
    attr(pix, "channels") = 4
    pal = readRDS(system.file("radarImagePalette.rds", package="flow"))  ## low-overhead read of palette, to allow changing dynamically

    .Call("apply_scan_converter", scanConv, x$samples, pix, pal, as.integer(c(iwidth, meta$jpgDynRange[1] * sampCount, 0.5 + sampCount * (diff(meta$jpgDynRange) / 255))))

    ## write out jpeg
    outname = file.path(OUTDIR, sub("\\.dat(\\.gz)?$", ".jpg", basename(files[i]), perl=TRUE))
    writeJPEG(pix, outname, quality=QUALITY / 100.0, bg="black")

    cat(outname, "\n")
}
